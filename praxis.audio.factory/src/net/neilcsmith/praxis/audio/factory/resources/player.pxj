
    @Out(1) AudioOut out1;
    @Out(2) AudioOut out2;
    
    @UGen Player pl;
    
    @P(1) @OnChange("sampleChanged") @OnError("sampleError")
    Table sample;
    @P(2) @Type.Number(min=0, max=1) @Transient @OnChange("updatePosition")
    double position;
    @P(3) @Type.Number(min=0, max=1)
    Property start;
    @P(4) @Type.Number(min=0, max=1, def=1)
    Property end;
    @P(5) @Type.Number(min=-4, max=4, def=1)
    Property speed;
    @P(6) @Type.Boolean
    Property loop;
    @P(7) @Transient @OnChange("updatePlaying")
    boolean playing;
    
    @AuxOut(1) Output ready;
    @AuxOut(2) Output error;
    
    @Override
    public void setup() {
        pl.table(sample);
        start.link(pl::in);
        end.link(pl::out);
        speed.link(pl::speed);
        loop.linkAs(arg -> PBoolean.from(arg).get().value(), pl::looping);
        link(pl, out1);
        link(pl, out2);
    }

    @Override
    public void update() {
        position = pl.position();
        playing = pl.playing();
    }
    
    @T(1) void play() {
        pl.play();
    }
    
    @T(2) void stop() {
        pl.stop();
    }
    
    void updatePosition() {
        pl.position(position);
    }
    
    void updatePlaying() {
        pl.playing(playing);
    }
    
    void sampleChanged() {
        pl.table(sample);
        ready.send();
    }
    
    void sampleError() {
        error.send();
    }
