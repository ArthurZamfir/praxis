
    @P(1) boolean active;
    @P(2) @Type(cls = PArray.class) @OnChange("updatePattern")
    Property pattern;
    @P(3) @ReadOnly
    int index;
    
    @Out(1) Output out;
    @Out(2) Output discard;
    
    double[] pt;

    @Override
    public void setup() {
        updatePattern();
    }

    @In(1) void in(Value arg) {
        if (checkSend()) {
            out.send(arg);
        } else {
            discard.send(arg);
        }
    }
    
    @T(1) void retrigger() {
        index = 0;
    }
    
    boolean checkSend() {
        if (active) {
            if (pt.length == 0) {
                return true;
            }
            double p = pt[index];
            index++;
            index %= pt.length;
            if (p > 0.999999) {
                return true;
            } else if (p < 0.000001) {
                return false;
            } else {
                return random(1) < p;
            }
        } else {
            return false;
        }
    }
    
    void updatePattern() {
        try {
            PArray arr = PArray.coerce(pattern.get());
            pt = new double[arr.getSize()];
            for (int i = 0; i < pt.length; i++) {
                double d = PNumber.coerce(arr.get(i)).value();
                pt[i] = d;
            }
            if (pt.length == 0) {
                index = 0;
            } else {
                index %= pt.length;
            }
        } catch (ValueFormatException ex) {
            log(WARNING, "Invalid pattern");
            pt = new double[0];
            index = 0;
            pattern.set(PArray.EMPTY);
        }
    }